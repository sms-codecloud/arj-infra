pipeline {
  agent { label 'win-agent-1' }
  options { disableConcurrentBuilds() }
  environment { TF_IN_AUTOMATION = "true" }

  parameters {
    choice(
      name: 'TF_ACTION',
      choices: ['APPLY', 'DESTROY'],
      description: 'Choose whether to apply or destroy Terraform.'
    )
  }

  stages {
    stage('Checkout Repo') {
      steps {
        cleanWs()
        bat 'git --version'
        dir("${env.WORKSPACE}\\arj-infra") {
          bat 'git clone -b main https://github.com/sms-codecloud/arj-infra.git .'
        }
      }
    }

    stage('Terraform Init & Run') {
      steps {
        withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws_secrets_shankar']]) {
          withEnv(["PATH=C:\\binaries\\terraform;${env.PATH}"]) {
            // Run Terraform from the module directory that contains *.tf
            dir("${env.WORKSPACE}\\arj-infra\\s3") {
              powershell '''
                $ErrorActionPreference = "Stop"

                if (-not (Test-Path -LiteralPath "sample.tfvars")) {
                  throw "sample.tfvars not found in: $(Get-Location). Place it next to your *.tf files."
                }

                Write-Host "Selected action: $env:TF_ACTION"
                terraform version | Out-Null

                terraform init -no-color

                switch ($env:TF_ACTION) {
                  'DESTROY' {
                    Write-Host "Planning destroy..."
                    terraform plan `
                      -destroy `
                      -var-file="sample.tfvars" `
                      -out="remove.tfplan" `
                      -input=false `
                      -no-color

                    Write-Host "Destroying..."
                    terraform destroy `
                      -var-file="sample.tfvars" `
                      -auto-approve `
                      -input=false `
                      -no-color
                  }

                  'APPLY' {
                    Write-Host "Planning apply..."
                    terraform plan `
                      -var-file="sample.tfvars" `
                      -out="create.tfplan" `
                      -input=false `
                      -no-color

                    Write-Host "Applying..."
                    terraform apply `
                      -auto-approve `
                      -input=false `
                      -no-color `
                      "create.tfplan"
                  }

                  default {
                    throw "Unsupported TF_ACTION: '$($env:TF_ACTION)'. Expected 'APPLY' or 'DESTROY'."
                  }
                }
              '''
            }
          }
        }
      }
    }
  }

  post {
    always {
      echo 'Cleaning up workspace...'
      cleanWs()
    }
  }
}
