pipeline {
  agent { label 'win-agent-1' }
  options { disableConcurrentBuilds() }
  environment { TF_IN_AUTOMATION = "true" }

  parameters {
    choice(
      name: 'TF_ACTION',
      choices: ['APPLY', 'DESTROY'],
      description: 'Choose whether to apply or destroy Terraform.'
    )
  }

  stages {
    stage('Checkout Repo') {
      steps {
        cleanWs()
        bat 'git --version'
        dir("${env.WORKSPACE}\\arj-infra") {
          bat 'git clone -b main https://github.com/sms-codecloud/arj-infra.git .'
        }
      }
    }

    stage('Terraform Init & Run') {
      steps {
        withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws_secrets_shankar']]) {
          withEnv(["PATH=C:\\binaries\\terraform;${env.PATH}"]) {
            dir("${env.WORKSPACE}\\arj-infra\\s3") {
              powershell '''
                $ErrorActionPreference = "Stop"

                Write-Host "Selected action: $env:TF_ACTION"
                terraform version

                # Ensure tfvars exists (create a minimal one if not committed)
                $tfvars = "sample.tfvars"
                if (-not (Test-Path -LiteralPath $tfvars)) {
                  @"# Auto-generated fallback
                  bucket_name      = "arj-bootcamp"
                  zip_file_path    = "D:/jenkins-workspace/web.zip"
                  base_key_prefix  = "web/student-web"
                  "@ | Set-Content -Path $tfvars -Encoding UTF8 -NoNewline
                                Write-Host "Created fallback $tfvars"
                }

                # Init
                terraform init -no-color

                switch ($env:TF_ACTION) {
                  'APPLY' {
                    Write-Host "Planning (create)..."
                    terraform plan `
                      -var-file="$tfvars" `
                      -input=false `
                      -no-color `
                      -out="create.tfplan"

                    Write-Host "Applying saved plan..."
                    # Do NOT pass -var-file here; plan already captured variables
                    terraform apply `
                      -auto-approve `
                      -input=false `
                      -no-color `
                      "create.tfplan"
                  }

                  'DESTROY' {
                    Write-Host "Planning destroy (optional)…"
                    terraform plan `
                      -destroy `
                      -var-file="$tfvars" `
                      -input=false `
                      -no-color `
                      -out="destroy.tfplan"

                    Write-Host "Destroying…"
                    # Do NOT pass a plan file to destroy; destroy doesn't take it
                    terraform destroy `
                      -var-file="$tfvars" `
                      -auto-approve `
                      -input=false `
                      -no-color
                  }

                  default {
                    throw "Unsupported TF_ACTION: '$($env:TF_ACTION)'. Expected 'APPLY' or 'DESTROY'."
                  }
                }
              '''
            }
          }
        }
      }
    }

}

  }

  post {
    always {
      echo 'Cleaning up workspace...'
      cleanWs()
    }
  }
}
